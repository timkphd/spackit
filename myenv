source /nopt/nrel/base/gcc-9.4.0/lmod-8.5.6/lmod/8.5.6/init/bash
#module use /nopt/nrel/spack/modules/tcl/linux-amzn2-skylake_avx512/
module use  /nopt/nrel/modules/lmod/linux-amzn2-x86_64/gcc/9.4.0
#module use  /nopt/nrel/modules/lmod/linux-amzn2-x86_64
alias ma="module avail"

alias spackit="source /home/ec2-user/spack/share/spack/setup-env.sh"


shopt -s histappend

td=`date +"%y%m%d"` ; if [ ! -f ~/histhist/$td ] ; then history -n ; history >  ~/histhist/$td; fi

savehist() {
td=`date +"%g%m%d"`
history -n
if [ ! -f ~/histhist/$td ] ; then
  history >  ~/histhist/$td;
fi
}

savenow() {
td=`date +"%g%m%d%H%M"`
history -n
if [ ! -f ~/histhist/$td ] ; then
  history >  ~/histhist/$td;
fi
}

today() {     
     local now=`date +"%Y-%m-%d"`
     if (( $# > 0 )) ; then   
         if [[ $1 == "-f" ]] ; then 
            find . -type f -newermt $now
         fi
         if [[ $1 == "-d" ]] ; then 
            find . -type d -newermt $now
         fi
    else
        find .  -newermt $now
    fi
    }


cstrip() {
# You can effectively make comments in a
# bash script by delimiting with :<<++++ and ++++
# This function removes them.
for script in "$@" ; do
    out=_$script
    echo $out
    sed  '/:<<++++/,/^++++/d' $script > $out
done
}


setperm() {
    echo setting permissions for $1
    find $1 -perm -u=x -exec chmod go+x {} \; 
    find $1 -perm -u=r -exec chmod go+r {} \; 
}

wackit () { 
# function to remove an entry from a variable such as PATH based on a substring
# export PATH=`wackit PATH mypath`
str=`printenv $1`
IFS=':'                    # set delimiter
read -ra ADDR <<< "$str"   # str is read into an array as tokens separated by IFS
SUB=$2
export NP=""
for i in "${ADDR[@]}"; do  # access each element of array
    if grep -q "$SUB" <<< "$i"; then
       :                   # put it back together skipping entires that contain the substring
    else 
       NP=`echo ${NP}" "${i}`
    fi
done
                           # print is out with ":" replacing " " and stripping the first if needed
echo $NP | sed "s, ,:,g" | sed "s,^:,,"
}

prepend() {
# prepend PATH /bonk
  if [ $1 == "-h" ] ; then
     echo "prepend P_VAR new_item"
     echo "prepends new_item to the path P_VAR"
     return 0
  else
    END=`printenv $1`
    if [ -z "$END" ]  ; then
      export $1=$2
    else
      export $1=$2:$END
    fi
  fi
}

append() {
# append PATH /bonk
  if [ $1 == "-h" ] ; then
     echo "append P_VAR new_item"
     echo "appends new_item to the path P_VAR"
     return 0
  else
    END=`printenv $1`
    if [ -z "$END" ]  ; then
      export $1=$2
    else
      export $1=$END:$2
    fi
  fi
}


# Function for printing and executing commands
cmd() {
  echo "+ $@";
  eval "$@";
}


account() {
    if (( $# > 0 )) ; then
      sacctmgr show assoc user=$1 format=account
      lslogins $1
    else
      sacctmgr show assoc user=tkaiser2 format=account
    fi
}

scr() {
    if [ $# -lt 1 ]; then
    cd /scratch/$USER
    else
    cd /scratch/$USER/$1
    fi
    }


alias showuser="lslogins"

mdiff(){ d1=$1 ;  while test $# -gt 0; do     ls -lt $1 ; diff $d1 $1;     echo ++++++++++++++++++++++++++++++ ;shift; done;  }


userinfo() {
 #allow input as uid instead of name
 #either should work
 u=`id -nu $1`
 echo $u
 id $u 2>/dev/null  && echo "  +++++++++++ "
 getent passwd $u 2>/dev/null && echo "  +++++++++++ "
 finger $u 2>/dev/null && echo "  +++++++++++ "
 last $u 2>/dev/null && echo "  +++++++++++ "
 lslogins $u 2>/dev/null && echo "  +++++++++++ "
 sacctmgr show associations user=$u format=account%15 2>/dev/null && echo "  +++++++++++ "
 w $u 2>/dev/null && echo "  +++++++++++ "
}

alias dcache="rm -rf ~/.lmod.d/.cache"

